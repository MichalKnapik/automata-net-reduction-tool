root: automaton
children: List<Automaton>

transitions: List<transition> = empty
visited: hashmap<String> = empty
frontier: list<String> = empty

---------------------------------------------------------------------------------------

# transitions from the initial state
visited = [fresh_init]

zero_mem = []
for child in children:
    zero_mem[child] = child.init

for child in children:
    prod_init = (child, child.init, root.init, zero_mem)
    frontier.append(prod_init)
    transitions.append((fresh_init, epsilon, prod_init))

# build the product
while (frontier not empty):
    state = frontier.pop()
    visited.append(state)

    for transition in child(state).local_transitions[state[child]]:
        result = (child(state), target(transition), root(state), memory(state))
	if result not in visited:
	   transitions.append((state, action(transition), result))
	   frontier.append(result)
	   
    for transition in root.local_transitions[state[child]]:
        result = (child(state), child_state(state), target(transition), memory(state))
	if result not in visited:
	   transitions.append((state, action(transition), result))
	   frontier.append(result)
	   
    for (trans_child, trans_root) in joint_transitions(root, child(state))[state]:
	new_memory = memory(state).copy
	new_memory[child] = target(trans_child)
	for child in children:
	        result = (child, memory[child], target(trans_root), new_memory)
		if result not in visited:
		   transitions.append((state, action(trans_child), result))
		   frontier.append(result)
		
---------------------------------------------------------------------------------------
